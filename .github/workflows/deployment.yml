name: Provision end to end
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '.github/**'
  workflow_dispatch:
jobs:
  DEV_PLAN:
    name: Terraform Dev Planning
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Configuration File upload
        id: upload
        run: |
          pwd
          ls -lRt
          cp env_vars/dev.tf iac_config/

      # Terraform Init
      - name: Terraform Init
        run: |
          cd iac_config
          terraform init

      # Terraform Validate
      - name: Terraform Validate
        run: |
          cd iac_config
          terraform validate

      # Terraform Plan
      - name: Terraform Plan
        run: |
          cd iac_config
          terraform plan -var="DB_NAME=${{ secrets.DB_NAME }}" -var="DB_USER=${{ secrets.DB_USER }}"

  DEV_APPLY:
    name: Terraform Dev Provision
    needs: [DEV_PLAN]
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
    steps:
      - uses: actions/checkout@v3
        
      - name: Configuration File upload
        id: upload
        run: |
          cp env_vars/dev.tf iac_config/

      - name: Terraform Apply
        id: apply
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          cd iac_config
          terraform init
          terraform apply -auto-approve -var="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" -var="DB_NAME=${{ secrets.DB_NAME }}" -var="DB_USER=${{ secrets.DB_USER }}"
          endpoint=`terraform output -raw endpoint`
          echo "DB_ENDPOINT=$endpoint" >> $GITHUB_OUTPUT

      - name: Run Schema Initialization
        id: db_deploy
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ steps.apply.outputs.DB_ENDPOINT }}
        run: |
          chmod +x schemas/init_schema.sh
          ./schemas/init_schema.sh

      # Test Database
      - name: Test Database Connectivity and Schema
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ steps.apply.outputs.DB_ENDPOINT }}
        run: |
          chmod +x test/*
          ./test/test_connectivity.sh
          ./test/test_data_integrity.sh

  PROD_PLAN:
    name: Terraform Prod Planning
    needs: [DEV_PLAN, DEV_APPLY]
    runs-on: ubuntu-latest
    environment: prod
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Configuration File upload
        id: upload
        run: |
          pwd
          ls -lRt
          cp env_vars/dev.tf iac_config/

      # Terraform Init
      - name: Terraform Init
        run: |
          cd iac_config
          terraform init

      # Terraform Plan
      - name: Terraform Plan
        run: |
          cd iac_config
          terraform plan -var="DB_NAME=${{ secrets.DB_NAME }}" -var="DB_USER=${{ secrets.DB_USER }}"

  PROD_APPLY:
    name: Terraform Production Provision
    needs: [PROD_PLAN]
    runs-on: ubuntu-latest
    environment: prod
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
    steps:
      - uses: actions/checkout@v3
        
      - name: Configuration File upload
        id: upload
        run: |
          cp env_vars/dev.tf iac_config/

      - name: Terraform Apply
        id: apply
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          cd iac_config
          terraform init
          terraform apply -auto-approve -var="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" -var="DB_NAME=${{ secrets.DB_NAME }}" -var="DB_USER=${{ secrets.DB_USER }}"
          endpoint=`terraform output -raw endpoint`
          echo "DB_ENDPOINT=$endpoint" >> $GITHUB_OUTPUT

      - name: Run Schema Initialization
        id: db_deploy
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ steps.apply.outputs.DB_ENDPOINT }}
        run: |
          chmod +x schemas/init_schema.sh
          ./schemas/init_schema.sh
