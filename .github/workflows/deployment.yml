name: Provision end to end
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '.github/**'
  workflow_dispatch:
jobs:
  DEV_PLAN:
    name: Terraform DEV Planning
    runs-on: self-hosted
    environment: dev
    env:
      BASH_SHELL_COMMAND: "bash -ileo pipefail {0}"
      PIPELINE_LOGGING_LEVEL: DEBUG
      TF_CLOUD_ORGANIZATION: "DevSecOpsHackathon"
      TF_HOSTNAME: "app.terraform.io"
    steps:
      - uses: actions/checkout@v3

      - name: Configuration File upload
        id: upload
        run: |
          pwd
          ls -lRt
          cp env_vars/dev.tf iac_config/

      - name: Running speculative plan action
        id: speculative-plan
        uses: InfrastructureAutomation/infrastructure-provision-library/actions/plan_tf_workspace@hackathon
        with:
          TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"
          TF_ORGANIZATION: ${{ env.TF_CLOUD_ORGANIZATION }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN}}
          TF_HOSTNAME: ${{ env.TF_HOSTNAME }}
          BUILD_FOLDER: "iac_config"
          TF_RUN_CODE: "${{ github.head_ref }} & PR #${{ github.event.number }}"

      - name: Update PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
            \`\`\`
            ${{ steps.speculative-plan.outputs.OUTPUT1_MESSAGE }}
            ${{ steps.speculative-plan.outputs.OUTPUT2_MESSAGE }}
            \`\`\`
            [Terraform Cloud Plan](${{ steps.speculative-plan.outputs.TFE_RUN_URL }})
            `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  DEV_APPLY:
    name: Terraform Dev Provision
    runs-on: self-hosted
    environment: dev
    env:
      BASH_SHELL_COMMAND: "bash -ileo pipefail {0}"
      PIPELINE_LOGGING_LEVEL: DEBUG
      TF_CLOUD_ORGANIZATION: "DevSecOpsHackathon"
      TF_HOSTNAME: "app.terraform.io"
    steps:
      - uses: actions/checkout@v3

      - name: Configuration File upload
        id: upload
        run: |
          cp env_vars/dev.tf iac_config/

      - name: Running apply action
        id: APPLY
        uses: jonsaydam/infrastructure-provision-library/actions/apply_tf_workspace@hackathon
        with:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          TF_ORGANIZATION: ${{ env.TF_CLOUD_ORGANIZATION }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN}}
          TF_HOSTNAME: ${{ env.TF_HOSTNAME }}
          BUILD_FOLDER: iac_config
          TF_RUN_CODE: "${{ github.head_ref }} & PR #${{ github.event.number }}"

      - name: Run Schema Initialization
        id: db_deploy
        run: |
          export PGPASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_NAME=devdatabase
          chmod +x schemas/init_schema.sh
          ./schemas/init_schema.sh

      # Test Database
      - name: Test Database Connectivity and Schema
        run: |
          chmod +x test/*
          ./test/test_connectivity.sh
          ./test/test_data_integrity.sh

#   PROD_PLAN:
#     name: Terraform Prod Planning
#     needs: [INITIALIZE, DEV_APPLY]
#     runs-on: ${{ needs.INITIALIZE.outputs.service_name }}
#     environment: prod
#     env:
#       BASH_SHELL_COMMAND: "bash -ileo pipefail {0}"
#       PIPELINE_LOGGING_LEVEL: DEBUG
#       TF_CLOUD_ORGANIZATION: "DevSecOpsHackathon"
#       TF_HOSTNAME: "mtlmtfe01.mgmt.interac.ca"
#     steps:
#       - uses: actions/checkout@v3

#       - name: Configuration File upload
#         shell: 'bash -ileo pipefail {0}'
#         id: upload
#         run: |
#           cp env_vars/dev.tf iac_config/

#       - name: Running speculative plan action
#         id: speculative-plan
#         uses: InfrastructureAutomation/infrastructure-provision-library/actions/plan_tf_workspace@hackathon
#         with:
#           TF_WORKSPACE: "hackaton_team10_prod"
#           TF_ORGANIZATION: ${{ env.TF_CLOUD_ORGANIZATION }}
#           TF_API_TOKEN: ${{ secrets.TF_API_TOKEN}}
#           TF_HOSTNAME: ${{ env.TF_HOSTNAME }}
#           BUILD_FOLDER: iac_config
#           TF_RUN_CODE: "${{ github.head_ref }} & PR #${{ github.event.number }}"

#   PROD_APPLY:
#     name: Terraform Production Provision
#     needs: [INITIALIZE, PROD_PLAN]
#     runs-on: ${{ needs.INITIALIZE.outputs.service_name }}
#     environment: prod
#     env:
#       BASH_SHELL_COMMAND: "bash -ileo pipefail {0}"
#       PIPELINE_LOGGING_LEVEL: DEBUG
#       TF_CLOUD_ORGANIZATION: "DevSecOpsHackathon"
#       TF_HOSTNAME: "mtlmtfe01.mgmt.interac.ca"
#     steps:
#       - uses: actions/checkout@v3

#       - name: Configuration File upload
#         id: upload
#         run: |
#           cp env_vars/prod.tf iac_config/

#       - name: Running apply action
#         id: APPLY
#         uses: InfrastructureAutomation/infrastructure-provision-library/actions/apply_tf_workspace@main
#         with:
#           TF_WORKSPACE: "hackaton_team10_prod"
#           TF_ORGANIZATION: ${{ env.TF_CLOUD_ORGANIZATION }}
#           TF_API_TOKEN: ${{ secrets.TF_API_TOKEN}}
#           TF_HOSTNAME: ${{ env.TF_HOSTNAME }}
#           BUILD_FOLDER: iac_config
#           TF_RUN_CODE: "${{ github.head_ref }} & PR #${{ github.event.number }}"
#
      # - name: Run Schema Initialization
      #   id: db_deploy
      #   run: |

      #     export PGPASSWORD=${{ secrets.DB_PASSWORD }}
      #     export DB_NAME=proddatabase
      #     cd ../schemas/init_schema.sh
  RUNNER_CLEANUP:
    name: Clean up job and runner
#    needs: [INITIALIZE, DEV_PLAN, DEV_APPLY, PROD_PLAN, PROD_APPLY]
    needs: [INITIALIZE, DEV_APPLY]
    if: always()
    uses: 'Interac/composite-actions-core/.github/workflows/cleanup_runners.yaml@main'
    with:
      runner-service-name: ${{ needs.INITIALIZE.outputs.service_name }}
    secrets:
      auth_token: ${{ secrets.RUNNER_DEPLOYMENT_PAT }}
